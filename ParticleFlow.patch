Index: CommonTools/ParticleFlow/interface/IsolatedPFCandidateSelectorDefinition.h
===================================================================
RCS file: /cvs/CMSSW/CMSSW/CommonTools/ParticleFlow/interface/IsolatedPFCandidateSelectorDefinition.h,v
retrieving revision 1.4
diff -u -p -r1.4 IsolatedPFCandidateSelectorDefinition.h
--- CommonTools/ParticleFlow/interface/IsolatedPFCandidateSelectorDefinition.h	27 Jul 2012 08:41:57 -0000	1.4
+++ CommonTools/ParticleFlow/interface/IsolatedPFCandidateSelectorDefinition.h	22 Nov 2012 09:48:49 -0000
@@ -11,103 +11,129 @@ namespace pf2pat {
 
   class IsolatedPFCandidateSelectorDefinition : public PFCandidateSelectorDefinition {
 
-  public:
-    typedef edm::ValueMap<double> IsoMap;
-
-    IsolatedPFCandidateSelectorDefinition ( const edm::ParameterSet & cfg ) :
-      isolationValueMapChargedLabels_(cfg.getParameter< std::vector<edm::InputTag> >("isolationValueMapsCharged") ),
-      isolationValueMapNeutralLabels_(cfg.getParameter< std::vector<edm::InputTag> >("isolationValueMapsNeutral") ),
-      doDeltaBetaCorrection_(cfg.getParameter<bool>("doDeltaBetaCorrection")),
-      deltaBetaIsolationValueMap_(cfg.getParameter< edm::InputTag >("deltaBetaIsolationValueMap") ),
-      deltaBetaFactor_(cfg.getParameter<double>("deltaBetaFactor")),
-      isRelative_(cfg.getParameter<bool>("isRelative")),
-      isolationCut_(cfg.getParameter<double>("isolationCut")) {}
-    
-
-
-    void select( const HandleToCollection & hc, 
-		 const edm::EventBase & e,
-		 const edm::EventSetup& s) {
-      selected_.clear();
-    
-
-      // read all charged isolation value maps
-      std::vector< edm::Handle<IsoMap> > 
-	isoMapsCharged(isolationValueMapChargedLabels_.size());
-      for(unsigned iMap = 0; iMap<isolationValueMapChargedLabels_.size(); ++iMap) {
-	e.getByLabel(isolationValueMapChargedLabels_[iMap], isoMapsCharged[iMap]);
-      }
-
-
-      // read all neutral isolation value maps
-      std::vector< edm::Handle<IsoMap> > 
-	isoMapsNeutral(isolationValueMapNeutralLabels_.size());
-      for(unsigned iMap = 0; iMap<isolationValueMapNeutralLabels_.size(); ++iMap) {
-	e.getByLabel(isolationValueMapNeutralLabels_[iMap], isoMapsNeutral[iMap]);
+    public:
+      typedef edm::ValueMap<double> IsoMap;
+      typedef edm::ValueMap<double> EffectiveAreaMap;
+
+      IsolatedPFCandidateSelectorDefinition ( const edm::ParameterSet & cfg ) :
+        isolationValueMapChargedLabels_(cfg.getParameter< std::vector<edm::InputTag> >("isolationValueMapsCharged") ),
+        isolationValueMapNeutralLabels_(cfg.getParameter< std::vector<edm::InputTag> >("isolationValueMapsNeutral") ),
+        doDeltaBetaCorrection_(cfg.getParameter<bool>("doDeltaBetaCorrection")),
+        deltaBetaIsolationValueMap_(cfg.getParameter< edm::InputTag >("deltaBetaIsolationValueMap") ),
+        deltaBetaFactor_(cfg.getParameter<double>("deltaBetaFactor")),
+        doEffectiveAreaCorrection_(cfg.getParameter<bool>("doEffectiveAreaCorrection")),
+        rho_(cfg.getParameter<edm::InputTag>("rho")),
+        effectiveAreas_(cfg.getParameter<edm::InputTag>("effectiveAreas")),
+        isRelative_(cfg.getParameter<bool>("isRelative")),
+        isolationCut_(cfg.getParameter<double>("isolationCut")) {
+          if (doEffectiveAreaCorrection_ && doDeltaBetaCorrection_) {
+            throw cms::Exception("IsolatedPFCandidateSelectorDefinition") << "doEffectiveAreaCorrection and doDeltaBetaCorrection are mutually excluded. Please choose!" << std::endl;
+          }
+        }
+
+
+
+      void select( const HandleToCollection & hc, 
+          const edm::EventBase & e,
+          const edm::EventSetup& s) {
+        selected_.clear();
+
+
+        // read all charged isolation value maps
+        std::vector< edm::Handle<IsoMap> > 
+          isoMapsCharged(isolationValueMapChargedLabels_.size());
+        for(unsigned iMap = 0; iMap<isolationValueMapChargedLabels_.size(); ++iMap) {
+          e.getByLabel(isolationValueMapChargedLabels_[iMap], isoMapsCharged[iMap]);
+        }
+
+
+        // read all neutral isolation value maps
+        std::vector< edm::Handle<IsoMap> > 
+          isoMapsNeutral(isolationValueMapNeutralLabels_.size());
+        for(unsigned iMap = 0; iMap<isolationValueMapNeutralLabels_.size(); ++iMap) {
+          e.getByLabel(isolationValueMapNeutralLabels_[iMap], isoMapsNeutral[iMap]);
+        }
+
+        edm::Handle<IsoMap> dBetaH;
+        if(doDeltaBetaCorrection_) {
+          e.getByLabel(deltaBetaIsolationValueMap_, dBetaH);
+        }
+
+        edm::Handle<double> rhoHandle;
+        edm::Handle<EffectiveAreaMap> effectiveAreasHandle;
+
+        if (doEffectiveAreaCorrection_) {
+          e.getByLabel(rho_, rhoHandle);
+          e.getByLabel(effectiveAreas_, effectiveAreasHandle);
+        }
+
+        unsigned key=0;
+        for( collection::const_iterator pfc = hc->begin(); 
+            pfc != hc->end(); ++pfc, ++key) {
+          reco::PFCandidateRef candidate(hc,key);
+
+          bool passed = true;
+          double isoSumCharged=0.0;
+          double isoSumNeutral=0.0;
+
+          for(unsigned iMap = 0; iMap<isoMapsCharged.size(); ++iMap) {
+            const IsoMap & isoMap = *(isoMapsCharged[iMap]);
+            double val = isoMap[candidate];
+            isoSumCharged+=val;
+          }
+
+          for(unsigned iMap = 0; iMap<isoMapsNeutral.size(); ++iMap) {
+            const IsoMap & isoMap = *(isoMapsNeutral[iMap]);
+            double val = isoMap[candidate];
+            isoSumNeutral+=val;
+          }
+
+
+          if ( doDeltaBetaCorrection_ ) {
+            const IsoMap& isoMap = *dBetaH;
+            double dBetaVal = isoMap[candidate];
+            double dBetaCorIsoSumNeutral = isoSumNeutral + deltaBetaFactor_*dBetaVal; 
+            isoSumNeutral = dBetaCorIsoSumNeutral>0 ? dBetaCorIsoSumNeutral : 0; //follow muon POG definition in 2012
+          } else if (doEffectiveAreaCorrection_) {
+            const double rho = *rhoHandle;
+            const EffectiveAreaMap effectiveAreas = *effectiveAreasHandle;
+            const double effectiveArea = effectiveAreas[candidate];
+
+            isoSumNeutral = std::max(0.0, isoSumNeutral - rho * effectiveArea);
+          }
+
+          double isoSum=isoSumCharged+isoSumNeutral;
+
+          if( isRelative_ ) {
+            isoSum /= candidate->pt();
+          }
+
+          if ( isoSum>isolationCut_ ) {
+            passed = false;
+          }
+
+          if(passed) {
+            // passed all cuts, selected
+            selected_.push_back( reco::PFCandidate(*pfc) );
+            reco::PFCandidatePtr ptrToMother( hc, key );
+            selected_.back().setSourceCandidatePtr( ptrToMother );
+          }
+        }
       }
 
-      edm::Handle<IsoMap> dBetaH;
-      if(doDeltaBetaCorrection_) {
-	e.getByLabel(deltaBetaIsolationValueMap_, dBetaH);
-      }
 
-      unsigned key=0;
-      for( collection::const_iterator pfc = hc->begin(); 
-	   pfc != hc->end(); ++pfc, ++key) {
-	reco::PFCandidateRef candidate(hc,key);
-
-	bool passed = true;
-	double isoSumCharged=0.0;
-	double isoSumNeutral=0.0;
-
-	for(unsigned iMap = 0; iMap<isoMapsCharged.size(); ++iMap) {
-	  const IsoMap & isoMap = *(isoMapsCharged[iMap]);
-	  double val = isoMap[candidate];
-	  isoSumCharged+=val;
-	}
-
-	for(unsigned iMap = 0; iMap<isoMapsNeutral.size(); ++iMap) {
-	  const IsoMap & isoMap = *(isoMapsNeutral[iMap]);
-	  double val = isoMap[candidate];
-	  isoSumNeutral+=val;
-	}
-	
-
-	if ( doDeltaBetaCorrection_ ) {
-	  const IsoMap& isoMap = *dBetaH;
-	  double dBetaVal = isoMap[candidate];
-	  double dBetaCorIsoSumNeutral = isoSumNeutral + deltaBetaFactor_*dBetaVal; 
-	  isoSumNeutral = dBetaCorIsoSumNeutral>0 ? dBetaCorIsoSumNeutral : 0; //follow muon POG definition in 2012
-	}
-
-	double isoSum=isoSumCharged+isoSumNeutral;
-
-	if( isRelative_ ) {
-	  isoSum /= candidate->pt();
-	}
-
-	if ( isoSum>isolationCut_ ) {
-	  passed = false;
-	}
-
-	if(passed) {
-	  // passed all cuts, selected
-	  selected_.push_back( reco::PFCandidate(*pfc) );
-	  reco::PFCandidatePtr ptrToMother( hc, key );
-	  selected_.back().setSourceCandidatePtr( ptrToMother );
-	}
-      }
-    }
-    
+    private:
+      std::vector<edm::InputTag> isolationValueMapChargedLabels_;
+      std::vector<edm::InputTag> isolationValueMapNeutralLabels_;
+      bool                       doDeltaBetaCorrection_;
+      edm::InputTag              deltaBetaIsolationValueMap_;
+      double                     deltaBetaFactor_;
+      bool                       doEffectiveAreaCorrection_;
+      edm::InputTag              rho_;
+      edm::InputTag              effectiveAreas_;
+      bool                       isRelative_; 
+      double                     isolationCut_;
 
-  private:
-    std::vector<edm::InputTag> isolationValueMapChargedLabels_;
-    std::vector<edm::InputTag> isolationValueMapNeutralLabels_;
-    bool                       doDeltaBetaCorrection_;
-    edm::InputTag              deltaBetaIsolationValueMap_;
-    double                     deltaBetaFactor_;
-    bool                       isRelative_; 
-    double                     isolationCut_;
   };
 
 }
Index: CommonTools/ParticleFlow/python/Isolation/pfIsolatedElectrons_cfi.py
===================================================================
RCS file: /cvs/CMSSW/CMSSW/CommonTools/ParticleFlow/python/Isolation/pfIsolatedElectrons_cfi.py,v
retrieving revision 1.4
diff -u -p -r1.4 pfIsolatedElectrons_cfi.py
--- CommonTools/ParticleFlow/python/Isolation/pfIsolatedElectrons_cfi.py	20 Mar 2012 09:44:54 -0000	1.4
+++ CommonTools/ParticleFlow/python/Isolation/pfIsolatedElectrons_cfi.py	22 Nov 2012 09:48:49 -0000
@@ -13,6 +13,9 @@ pfIsolatedElectrons  = cms.EDFilter(
     doDeltaBetaCorrection = cms.bool(False),
     deltaBetaIsolationValueMap = cms.InputTag("elPFIsoValuePU04PFId"),
     deltaBetaFactor = cms.double(-0.5),    
+    doEffectiveAreaCorrection = cms.bool(False),
+    rho = cms.InputTag("kt6PFJets", "rho"),
+    effectiveAreas = cms.InputTag("elEffectiveAreas03"),
     ## if True isolation is relative to pT
     isRelative = cms.bool(True),
     isolationCut = cms.double(0.2)
Index: CommonTools/ParticleFlow/python/Isolation/pfIsolatedMuons_cfi.py
===================================================================
RCS file: /cvs/CMSSW/CMSSW/CommonTools/ParticleFlow/python/Isolation/pfIsolatedMuons_cfi.py,v
retrieving revision 1.5
diff -u -p -r1.5 pfIsolatedMuons_cfi.py
--- CommonTools/ParticleFlow/python/Isolation/pfIsolatedMuons_cfi.py	29 Sep 2011 12:58:31 -0000	1.5
+++ CommonTools/ParticleFlow/python/Isolation/pfIsolatedMuons_cfi.py	22 Nov 2012 09:48:49 -0000
@@ -14,6 +14,9 @@ pfIsolatedMuons  = cms.EDFilter(
     doDeltaBetaCorrection = cms.bool(False),
     deltaBetaIsolationValueMap = cms.InputTag("muPFIsoValuePU04"),
     deltaBetaFactor = cms.double(-0.5),
+    doEffectiveAreaCorrection = cms.bool(False),
+    rho = cms.InputTag("kt6PFJets", "rho"),
+    effectiveAreas = cms.InputTag("muEffectiveAreas"),
     ## if True isolation is relative to pT
     isRelative = cms.bool(True),
     ## if True all isoValues are combined (summed)
Index: CommonTools/ParticleFlow/python/Isolation/pfIsolatedPhotons_cfi.py
===================================================================
RCS file: /cvs/CMSSW/CMSSW/CommonTools/ParticleFlow/python/Isolation/pfIsolatedPhotons_cfi.py,v
retrieving revision 1.4
diff -u -p -r1.4 pfIsolatedPhotons_cfi.py
--- CommonTools/ParticleFlow/python/Isolation/pfIsolatedPhotons_cfi.py	20 Mar 2012 09:44:54 -0000	1.4
+++ CommonTools/ParticleFlow/python/Isolation/pfIsolatedPhotons_cfi.py	22 Nov 2012 09:48:49 -0000
@@ -13,6 +13,9 @@ pfIsolatedPhotons  = cms.EDFilter(
     doDeltaBetaCorrection = cms.bool(False),
     deltaBetaIsolationValueMap = cms.InputTag("phPFIsoValuePU04PFId"),
     deltaBetaFactor = cms.double(-0.5),    
+    doEffectiveAreaCorrection = cms.bool(False),
+    rho = cms.InputTag("kt6PFJets", "rho"),
+    effectiveAreas = cms.InputTag("phEffectiveAreas"),
     ## if True isolation is relative to pT
     isRelative = cms.bool(True),
     isolationCut = cms.double(999) 
